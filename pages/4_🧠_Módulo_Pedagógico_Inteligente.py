import streamlit as st
# Importando os dados dos arquivos BNCC
import bncc_infantil
import bncc_fundamental
import bncc_medio

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="M√≥dulo Pedag√≥gico Inteligente", page_icon="üß†", layout="wide")

st.title("üß† M√≥dulo Pedag√≥gico Inteligente")
st.markdown("Gere atividades e planos de aula combinando a BNCC, o perfil do aluno e suas observa√ß√µes.")

# --- Inicializa√ß√£o e Verifica√ß√£o do Banco de Dados Tempor√°rio ---
if 'students' not in st.session_state or not st.session_state.students:
    st.warning("‚ö†Ô∏è Nenhum aluno cadastrado. Por favor, v√° ao 'M√≥dulo do Aluno' e cadastre pelo menos um aluno para usar este m√≥dulo.")
    st.stop()

CONTEXTO_BASE = """
**PARTE 1: FUNDAMENTOS DA INTERVEN√á√ÉO PSICOPEDAG√ìGICA**
A interven√ß√£o psicopedag√≥gica visa levar o aprendiz a construir sua aprendizagem de forma aut√¥noma e prazerosa, resgatando o "poder aprender" e fortalecendo o autoconceito. A abordagem se baseia na Epistemologia Convergente (Piaget, Psican√°lise, Psicologia Social), usando conceitos como V√çNCULO, TAREFA, e PROJETO. O terapeuta √© um MEDIADOR que utiliza o L√öDICO como ferramenta principal, partindo sempre do SIGNIFICATIVO para o aprendiz, em um ambiente de ACOLHIMENTO e sem patologizar quest√µes contextuais.
**PARTE 2: DIRETRIZES DA BASE NACIONAL COMUM CURRICULAR (BNCC)**
A IA deve utilizar as diretrizes da BNCC para contextualizar as atividades.
- **Educa√ß√£o Infantil:** Direitos (Conviver, Brincar, etc.) e Campos de Experi√™ncias (O eu, o outro e o n√≥s, etc.).
- **Ensino Fundamental:** 10 Compet√™ncias Gerais e √Åreas do Conhecimento (Linguagens, Matem√°tica, etc.).
- **Ensino M√©dio:** As mesmas compet√™ncias e √Åreas, incluindo Itiner√°rios Formativos.
"""

# --- 1. Sele√ß√£o do Aluno ---
st.header("1. Selecione o Aluno")
student_list = [s['name'] for s in st.session_state.students]
selected_student_name = st.selectbox("Escolha um aluno para iniciar o planejamento:", options=student_list)

selected_student = None
for student in st.session_state.students:
    if student['name'] == selected_student_name:
        selected_student = student
        break

if selected_student:
    st.info(f"**Perfil do Aluno Selecionado:**\n- **Diagn√≥stico/Observa√ß√µes:** {selected_student['diagnosis']}\n- **S√©rie/Ano:** {selected_student['grade']}")
else:
    st.stop()

# --- 2. Busca e Sele√ß√£o de Habilidades da BNCC ---
st.header("2. Busque e Selecione Habilidades da BNCC")
with st.expander("Clique para pesquisar na BNCC", expanded=True):
    etapa = st.selectbox("Etapa de Ensino", ["Educa√ß√£o Infantil", "Ensino Fundamental"])

    habilidades_selecionadas = []

    if etapa == "Educa√ß√£o Infantil":
        campos = list(bncc_infantil.bncc_infantil.keys())
        campo_selecionado = st.selectbox("Campo de Experi√™ncia", campos)
        
        objetivos = bncc_infantil.bncc_infantil.get(campo_selecionado, [])
        habilidades_selecionadas = st.multiselect("Selecione os Objetivos de Aprendizagem e Desenvolvimento:", options=objetivos)

    elif etapa == "Ensino Fundamental":
        # L√≥gica corrigida e mais segura para evitar erros
        areas = list(bncc_fundamental.bncc_fundamental.keys())
        area_selecionada = st.selectbox("√Årea do Conhecimento", areas)
        
        area_data = bncc_fundamental.bncc_fundamental.get(area_selecionada, {})
        componentes = list(area_data.keys())
        componente_selecionado = st.selectbox("Componente Curricular", componentes)
        
        componente_data = area_data.get(componente_selecionado, {})
        anos = list(componente_data.keys())
        ano_selecionado = st.selectbox("Ano", anos)
        
        habilidades = componente_data.get(ano_selecionado, [])
        habilidades_selecionadas = st.multiselect("Selecione as Habilidades:", options=habilidades)


# --- 3. Personaliza√ß√£o e Gera√ß√£o com IA ---
st.header("3. Personalize e Gere a Atividade")
with st.form("generation_form"):
    st.subheader("Habilidades da BNCC Selecionadas:")
    if habilidades_selecionadas:
        for habilidade in habilidades_selecionadas:
            st.success(habilidade)
    else:
        st.warning("Nenhuma habilidade selecionada. A IA ir√° gerar uma atividade mais gen√©rica.")

    st.subheader("Personaliza√ß√£o Avan√ßada")
    observacoes = st.text_area("Observa√ß√µes Pontuais do Aprendiz (Prefer√™ncias, dificuldades do dia, etc.)", 
                               placeholder="Ex: Hoje est√° mais agitado. Gosta muito de dinossauros. Apresenta boa resposta a est√≠mulos visuais.")
    
    atividade_existente = st.text_area("Atividade Existente para Adaptar (Opcional)",
                                       placeholder="Cole aqui o texto de uma atividade que voc√™ j√° tem e queira adaptar.")

    acao_ia = st.selectbox("Qual a√ß√£o voc√™ deseja que a IA realize?",
                           ["Criar uma atividade nova", "Adaptar a atividade existente", "Sugerir 3 abordagens diferentes para o conte√∫do"])
    
    submit_button = st.form_submit_button("üß† Gerar com IA")

# --- 4. Exibi√ß√£o do Resultado ---
if submit_button:
    st.header("4. Resultado Gerado pela IA")
    try:
        # Re-importando e configurando o modelo (garante que est√° dispon√≠vel na p√°gina)
        import google.generativeai as genai
        GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
        genai.configure(api_key=GOOGLE_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        
        with st.spinner("Aguarde, a IA est√° combinando todo o conhecimento para criar a melhor interven√ß√£o..."):
            # Constru√ß√£o do Prompt Avan√ßado
            prompt_parts = [
                f"**Contexto Obrigat√≥rio:**\n{CONTEXTO_BASE}\n",
                "---",
                "**INSTRU√á√ÉO:**",
                f"Voc√™ deve atuar como um especialista em psicopedagogia e educa√ß√£o inclusiva. Com base no contexto obrigat√≥rio e nos dados a seguir, execute a a√ß√£o solicitada.",
                "\n**DADOS DO APRENDIZ:**",
                f"- Nome: {selected_student['name']}",
                f"- Perfil Cl√≠nico/Educacional: {selected_student['diagnosis']}",
                f"- N√≠vel Escolar: {selected_student['grade']}",
                f"\n**DADOS PEDAG√ìGICOS:**",
                f"- Habilidades da BNCC a serem trabalhadas: {', '.join(habilidades_selecionadas) if habilidades_selecionadas else 'N√£o especificada'}",
                f"- Observa√ß√µes do dia (altamente relevantes): {observacoes if observacoes else 'Nenhuma'}",
                f"\n**A√á√ÉO SOLICITADA:** {acao_ia}",
            ]
            
            if acao_ia == "Adaptar a atividade existente" and atividade_existente:
                prompt_parts.append(f"\n**ATIVIDADE ORIGINAL PARA ADAPTAR:**\n{atividade_existente}")

            prompt = "\n".join(prompt_parts)
            
            response = model.generate_content(prompt)
            st.markdown(response.text)
            
    except Exception as e:
        st.error(f"Ocorreu um erro ao contatar a IA. Verifique se sua Chave de API est√° correta nos 'Secrets'. Erro: {e}")
